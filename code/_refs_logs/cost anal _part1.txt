


proc format;
value agecat 1="0-19" 2="20-64" 3="65+";
value agehcpf 1="0-3" 2="4-6" 3="7-12" 4="13-20" 5="21-64" 6="65+";
value age7cat 1="0-5" 2="6-10" 3="11-15" 4="16-20" 5="21-44" 6="45-64" 7="65+";
value fy 1="7/1/18 - 6/30/19" 2="7/1/19 - 6/30/20" 3="7/1/20 - 6/30/21";
value nserve 1="1" 2="2" 3="3" 4="4" 5="5" 6="6" 7="7+";
value fhqc 0="No services" 1="Only FQHC" 2="Only non-FQHC" 3="Both FQHC and non-FQHC";
value capvsh 1="Same month" 2="Short term first" 3="Cap first" 4="Short term only" 5="Cap only" 6="Neither";
value matchn 1="Both match" 2="Billing match" 3="Rendering match" 4="Neither match";
run;


proc import 
  datafile="J:\County mapping\Convert county.xlsx"
  dbms=xlsx 
  out=work.county_conv
  replace;
run;
/*proc contents data=county_conv varnum; run;*/
data county_conv; set county_conv; HCPF_County_Code_C=put(HCPF_County_Code,z2.); run;



libname bhjt 'X:\HCPF_SqlServer\queries';
options fmtsearch=(bhjt);

data medlong1; set bhjt.medicaidlong_bidm; run;  
data meddemog1; set bhjt.medicaiddemog_bidm; run;


libname bhline 'X:\studies\ShortTermBHServices\rawData';
data linebh1; set bhline.bh_services_raw_2022_1_20; run;                /*short term BH from Med claims line file (any of the 6 procedure codes) */
data BHO1; length clnt_id $11; set bhline.bho_nolimit_2022_07_28; run;        /* BHO file  */


*** Initial datasteps before merging datasets ;
/*proc contents data=medlong1 varnum; run;
proc contents data=meddemog1 varnum; run;
proc contents data=BHO1 varnum; run;*/

data medlong_y15_21; length clnt_id $11; set medlong1 (drop=aid_cd_1-aid_cd_5 title19: FED_POV_LVL_PC); 
where month ge '01Jul2015'd and month le '30Jun2021'd and BUDGET_GROUP not in (16,17,18,19,20,21,22,23,24,25,26,27,-1,);
run;

proc sql;
 create table medlong_y15_21_2 as
 select a.*,b.dob,b.gender,b.county,b.rethnic_hcpf
 from medlong_y15_21 as a left join meddemog1 as b on a.clnt_id=b.clnt_id ;
quit;

data medlong_y15_21_3; set medlong_y15_21_2;
 if month ge '01Jul2015'd and month le '30Jun2016'd then last_day_fy='30Jun2016'd;
 else if month ge '01Jul2016'd and month le '30Jun2017'd then last_day_fy='30Jun2017'd;
 else if month ge '01Jul2017'd and month le '30Jun2018'd then last_day_fy='30Jun2018'd;
 else if month ge '01Jul2018'd and month le '30Jun2019'd then last_day_fy='30Jun2019'd;
 else if month ge '01Jul2019'd and month le '30Jun2020'd then last_day_fy='30Jun2020'd;
 else if month ge '01Jul2020'd and month le '30Jun2021'd then last_day_fy='30Jun2021'd;

 age_end_fy = floor( (intck('month', dob, last_day_fy) - (day(last_day_fy) < min(day(dob), day(intnx ('month', last_day_fy, 1) -1)))) /12 );

 if age_end_fy lt 0 or age_end_fy gt 64 then delete;
 format last_day_fy date9.;
 run;

proc datasets nolist lib=work; delete medlong_y15_21_2 ; quit; run; 

proc sort data=medlong_y15_21_3 (keep=clnt_id month pcmp_loc_ID rae_assign managedCare) nodupkey out=finalSubjects; 
where pcmp_loc_ID ne ' ' and rae_assign=1 and managedCare=0 and month ge '01Jul2018'd and month le '30Jun2021'd; 
by clnt_id; 
run;


**import cost data;
libname cost "X:\Jake\short_term_bh\cost data";
proc format;
value clmType  1 = 'Pharmacy' 2='Hospitalizations' 3 = 'ER' 4 = 'Primary care'  100='Other';
run;
data cost1; set cost.clm_count_pay_amt_j1; where month ge '01Jul2015'd and month le '30Jun2021'd; run;
data cost1; set cost1; format month date9.;
 fy6=year(intnx('year.7', month, 0, 'BEGINNING')); 
run;
proc sql;
 create table cost2 as
 select
 MCAID_ID, month,
  sum(case when clmType=4 then pd_amt else 0 end) as PC_tot_pd_m,
  sum(pd_amt) as tot_pd_m
from cost1
group by MCAID_ID, month;
quit; 






***The PCMP location ID's all match to the Prov_Loc_Dim_V table. Create a unique table of PCMP loc id's to validate records in 'linebh1';
proc sort data=medlong1 (keep=pcmp_loc_ID) nodupkey out=unpcmp1; by pcmp_loc_ID; run;
proc sql;
 create table linebh_t1 as
 select a.*,
   case when b.pcmp_loc_ID ne ' ' then 1 else 0 end as billprov_match
 from linebh1 as a left join unpcmp1 as b  on a.BILL_PROV_LOC_ID=b.pcmp_loc_ID ;
 quit;
data linebh_t2 (drop=billprov_match ); 
set linebh_t1; where billprov_match=1 ; 
run; *186611;


*** SHORT TERM BH services  ;

data linebh2 (drop=LNE_FRST_SVC_DT LNE_LST_SVC_DT); set linebh_t2; 
 FRST_SVC_DT=datepart(LNE_FRST_SVC_DT);
 LST_SVC_DT=datepart(LNE_LST_SVC_DT);
 FRST_DT_mon=intnx('month',FRST_SVC_DT,0,"BEGINNING");

 fy6=year(intnx('year.7', FRST_SVC_DT, 0, 'BEGINNING')); 

 if FRST_SVC_DT ge '01Jul2018'd and FRST_SVC_DT le '30Jun2021'd;
 format FRST_SVC_DT LST_SVC_DT FRST_DT_mon date9.;
run;

proc sql;
 create table pcmp_had_bh as select
 BILL_PROV_LOC_ID, fy6, max(case when BILL_PROV_LOC_ID ne ' ' then 1 else 0 end) as pcmp_had_bh
from linebh2
group by BILL_PROV_LOC_ID,fy6;
quit;                              /*We need this later in the code*/



** Sort by variables that should represent a unique service, then find the number of services and FQHC's per month;
proc sort data=linebh2 nodupkey out=linebh3; by mcaid_id icn_nbr FRST_SVC_DT LST_SVC_DT proc_cd; run;
proc sql;
 create table linebh_red1 as
 select
 mcaid_id, icn_nbr, FRST_SVC_DT, FRST_DT_mon, proc_cd,
  count(*) as cnt_serv_day
from linebh3
group by mcaid_id, icn_nbr, FRST_SVC_DT, FRST_DT_mon, proc_cd;
quit; 
run;
proc sql;
 create table linebh_red2 as
 select
 mcaid_id, FRST_DT_mon,
  sum(cnt_serv_day) as tot_serv_mon
from linebh_red1
group by mcaid_id, FRST_DT_mon;
quit; 
run;


*** CAPITATED BH services  ;

data bho2; set bho1; 
 where start_dt ge '01Jul2015'd and start_dt le '30Jun2021'd /*and hosp not in (1,2) and ER ne 1*/;
run;

proc sort data=bho2 nodupkey out=bho3; by CLNT_ID CLM_NUM clm_version PROC_CD REV_CD start_dt LINE_ITEM_NUM ; run;  
proc sql;
 create table bho_month1 as
 select
 CLNT_ID, month,
  max(case when hosp in (1,2) then 1 else 0 end) as bho_hosp_m,
  max(case when ER = 1 then 1 else 0 end) as bho_er_m,
  max(case when hosp not in (1,2) and ER ne 1 then 1 else 0 end) as bho_other_m
from bho3
group by CLNT_ID, month;
quit; 



************ Combine datasets into a monthly file ***************;

proc sort data=medlong_y15_21_3; by clnt_id; run;
data medlong_y15_21_F; merge medlong_y15_21_3 (in=a) finalsubjects (in=b keep=clnt_id); by clnt_id; if a and b; run;
proc datasets nolist lib=work; delete medlong_y15_21_3; quit; run;
proc sql;
 create table shortbh1 as
 select a.*,b.bho_hosp_m, b.bho_er_m, b.bho_other_m, c.tot_serv_mon, d.PC_tot_pd_m, d.tot_pd_m
 from medlong_y15_21_F as a left join bho_month1 as b   
  on a.clnt_id=b.clnt_id and a.month=b.month 
 left join linebh_red2 as c
  on a.clnt_id=c.mcaid_id and a.month=c.FRST_DT_mon
 left join cost2 as d
  on a.clnt_id=d.MCAID_ID and a.month=d.month
  ;
quit;

data shortbh2; set shortbh1;
 if age_end_fy ge 0 and age_end_fy le 5 then age_cat7=1;
 else if age_end_fy ge 6 and age_end_fy le 10 then age_cat7=2;
 else if age_end_fy ge 11 and age_end_fy le 15 then age_cat7=3;
 else if age_end_fy ge 16 and age_end_fy le 20 then age_cat7=4;
 else if age_end_fy ge 21 and age_end_fy le 44 then age_cat7=5;
 else if age_end_fy ge 45 and age_end_fy le 64 then age_cat7=6;
 else if age_end_fy ge 65 then age_cat7=7; /*this won't exist in this dataset*/

 if bho_hosp_m=. then bho_hosp_m=0;
 if bho_er_m=. then bho_er_m=0;
 if bho_other_m=. then bho_other_m=0;
 if tot_serv_mon=. then do; tot_serv_mon=0; end;
 if PC_tot_pd_m=. then PC_tot_pd_m=0;
 if tot_pd_m=. then tot_pd_m=0;

fy6=year(intnx('year.7', month, 0, 'BEGINNING'));

 format age_cat7 age7cat. ;
run; 




proc datasets nolist lib=work; delete linebh_t1 linebh_t2 linebh2 linebh3 linebh_red1 shortbh1 bho2 bho3; quit; run; 

**Find number of services in time periods, find freq of each county and budget group per time period for each person;
proc sql;
 create table tri_year1 as
 select
 clnt_id, fy6,
  count(*) as mths_elig_all,
  max(age_end_fy) as age_last,
  max(age_cat7) as age_last_cat,
  sum(tot_serv_mon) as tot_serv_year,
  sum(case when managedCare=0 then PC_tot_pd_m else 0 end) as PC_tot_pd_fy,
  sum(case when managedCare=0 then tot_pd_m else 0 end) as tot_pd_fy,
  sum(case when managedCare=0 then 1 else 0 end) as mths_elig_no_mc,
  max(case when bho_hosp_m = 1 then 1 else 0 end) as bho_hosp_y,
  max(case when bho_er_m = 1 then 1 else 0 end) as bho_er_y,
  max(case when bho_other_m = 1 then 1 else 0 end) as bho_other_y
from shortbh2
group by clnt_id, fy6;
quit; 
proc sql;
 create table temp_tri1 as
 select
 clnt_id,month,gender,rethnic_hcpf,fy6,enr_cnty,
  count(*) as n_county
from shortbh2
group by clnt_id, fy6,enr_cnty;
quit; 
proc sql;
 create table temp_tri2 as
 select
 clnt_id,month,fy6,BUDGET_GROUP,
  count(*) as n_budget_grp
from shortbh2
group by clnt_id, fy6,BUDGET_GROUP;
quit; 


proc sort data=temp_tri1; by clnt_id fy6 n_county month; run;
proc sort data=temp_tri2; by clnt_id fy6 n_budget_grp month; run;

data temp_tri1a (keep=clnt_id fy6 enr_cnty gender rethnic_hcpf); set temp_tri1; by clnt_id fy6 n_county month; if last.fy6; run;
data temp_tri2a (keep=clnt_id fy6 BUDGET_GROUP); set temp_tri2; by clnt_id fy6 n_budget_grp month; if last.fy6; run;

data tri_year2; merge tri_year1 temp_tri1a temp_tri2a; by clnt_id fy6; run;




data tri_year3; set tri_year2;
 if tot_serv_year ge 7 then tot_serve_cat=7;
 else tot_serve_cat = tot_serv_year;

label 
tot_serve_cat="Number of services FY"
age_last="Age (years)"
age_last_cat="Age (years)"
bho_hosp_y="Hospital BH capitated"
bho_er_y="ER BH capitated"
bho_other_y="Other BH capitated"
;
format age_last_cat age7cat. tot_serve_cat nserve.  ;
RUN;

**Add RAE;
proc sql;
 create table tri_year4 as
 select a.*,b.RAE_ID
 from tri_year3 as a left join county_conv as b   
  on a.enr_cnty=b.HCPF_County_Code_C  ;
 quit;
run;
proc sort data=tri_year4; by clnt_id fy6; run;


proc datasets nolist lib=work; delete shortbh2 tri_year1 tri_year2 tri_year3 temp_tri1 temp_tri2 temp_tri1a temp_tri2a; quit; run;



****Was member attributed to an FQHC, and/or SIM ;

proc import 
  datafile="X:\SIM\SIM NPI_PCMP Final_20220425.xlsx"  /* old one was 'SIM NPI_PCMP Final', which might now be 'SIM NPI_PCMP Final_20220401' */
  dbms=xlsx   
  out=work.sim_id1
  replace;
run;
data sim_id2; set sim_id1;
   new = put(pcmp_loc_id, 7. -L);
   drop pcmp_loc_id;
   rename new=pcmp_loc_id;
run;
proc sort data=sim_id2 nodupkey out=sim_id_un; by pcmp_loc_id; run;

proc sql;
create table medlgsimfq1 as
select a.clnt_id, a.month, a.pcmp_loc_ID, case when b.pcmp_loc_ID ne ' ' then 1 else 0 end as SIM_practice, case when a.pcmp_loc_type_cd='32' then 1 else 0 end as FQHC
from medlong_y15_21 as a
left join sim_id_un as b on a.pcmp_loc_ID=b.pcmp_loc_id
 where a.month ge '01Jul2018'd;
quit; run; 

data medlgsimfq2; set medlgsimfq1 (keep=clnt_id month pcmp_loc_id SIM_practice FQHC); if pcmp_loc_id=' ' then delete;
 fy6=year(intnx('year.7', month, 0, 'BEGINNING'));
run;

proc sql;
 create table medlgsimfq3 as
 select
 clnt_id, fy6, pcmp_loc_id, month, SIM_practice, FQHC,
  count(*) as n_location
from medlgsimfq2
group by clnt_id, fy6, pcmp_loc_id;
quit;
proc sort data=medlgsimfq3; by clnt_id fy6 n_location month; run;
data medlgsimfq4 (keep=clnt_id fy6 pcmp_loc_id n_location SIM_practice FQHC); set medlgsimfq3; by clnt_id fy6 n_location month; if last.fy6; run;

data medlgsimfq5; set medlgsimfq4; 
 if n_location lt 6 then delete;
run;

proc datasets nolist lib=work; delete medlgsimfq1 medlgsimfq2 medlgsimfq3 medlgsimfq4; quit; run; 


proc sql;
 create table tri_year5 as
 select a.*, b.SIM_practice, b.FQHC, b.pcmp_loc_id, b.n_location
 from tri_year4 as a left join medlgsimfq5 as b  on a.clnt_id=b.clnt_id and a.fy6=b.fy6;
quit;

data tri_year6; set tri_year5; if fy6 in (2018,2019,2020) and n_location=. then delete; run; 

proc sql;
 create table remove1 as select
 clnt_id, max(case when n_location ne . then 1 else 0 end) as idvalid18_20
from tri_year5 where fy6 in (2018,2019,2020)
group by clnt_id;
quit;
proc sort data=tri_year6; by clnt_id; run;
data tri_year7; merge tri_year6 (in=a) remove1 (in=b where=(idvalid18_20=0)); by clnt_id; if a and not b; run;

proc sql;
 create table tri_year8 as
 select a.*, b.pcmp_had_bh
 from tri_year7 as a left join pcmp_had_bh as b  on a.pcmp_loc_id=b.BILL_PROV_LOC_ID and a.fy6=b.fy6;
quit;

data tri_year9; set tri_year8 (drop=idvalid18_20);
 if tot_serv_year ge 6 then tot_serve_lin_cap=6;
 else tot_serve_lin_cap = tot_serv_year;

 if mths_elig_no_mc=. then mths_elig_no_mc=0; /*managed care in Med long is never missing, so these people only had months in a year with managed care*/
 if fy6 in (2018,2019,2020) and SIM_practice=. then SIM_practice=0;
 if fy6 in (2018,2019,2020) and FQHC=. then FQHC=0;
 if fy6 in (2018,2019,2020) and pcmp_had_bh=. then pcmp_had_bh=0;
 if fy6 in (2015,2016,2017) then do; SIM_practice=-1; FQHC=-1; tot_serv_year=-1; tot_serve_cat=-1; tot_serve_lin_cap=-1; pcmp_had_bh=-1; end;  /*using this for regression analysis*/

 if mths_elig_no_mc=0 then total_cost_pmpm=0; else total_cost_pmpm= tot_pd_fy/mths_elig_no_mc;
 if mths_elig_no_mc=0 then pctotal_cost_pmpm=0; else pctotal_cost_pmpm= PC_tot_pd_fy/mths_elig_no_mc;

label 
pcmp_had_bh="PCMP delivered STBH"
tot_serve_lin_cap="Number of services FY";
run;



Proc sort data=tri_year9; by fy6 clnt_id; run;

proc means data=tri_year9 min max mean median maxdec=1; by fy6; class tot_serve_lin_cap; var total_cost_pmpm; run;

 
